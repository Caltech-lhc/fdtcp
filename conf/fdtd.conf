# section name
[configcontrols]
# unlimited - mainly used for max, as check will not be done at all;
# auto - use default FDT options.
# min variable has to be always bigger than 0
# Each config has a control attribute, which allows users to overrite it with a third party call.
# In case it is allowed to overwrite, attribute has to contain min, max, default keys.
# except some cases there value is a boolean, in that case it is just true/false and it does not
# have min/max values.

# window size. Set TCP SO_SND_BUFFER window size to windowSize for the client session.
# Default auto, which means FDT will try to achieve best one.
windowSize = {'min': 1, 'max': 24000, 'default': 'auto', 'overwrite': True}

# Number of parralel streams(sockets). FDT by default uses 4 streams and this can also be controled
# either by user, or only by site.
numberOfStreams = {'min': 1, 'max': 16, 'default': 'auto', 'overwrite': True}

# Restrict the transfer speed at the specified rate.
# When this parameter is specified in the server it represents the maximum transfer rate for every FDT session.
# If the parameter is specified in both the server and the client, the minimum value between them will be used.
rateLimit = {'min': 1, 'max': 'unlimited', 'default': 'auto', 'overwrite': True}

# <buffSize> Size for the I/O buffers The default value is 1MByte. If the number of clients or sockets is expected to be very high,
# it is better to decrease this value.
# The memory used by this buffers is directly mapped in the operating system memory pages.
# The memory used by this buffers is limited by the JVM and can be increased passing
# -XX:MaxDirectMemorySize=<X>m (e.g -XX:MaxDirectMemorySize=256m) to the 'java' command
# or MaxDirectMemorySize configuration parameter.
bufferSize = {'min': 1, 'max': 'unlimited', 'default': 'auto', 'overwrite': True}

# Disables file locking on the writer side. Default this
# flag is false, which means that FDT tries to acquire
# an exclusive file lock for the file which is written.
noFileLock = {'default': 'auto', 'overwrite': True}

#Disables intermediate hidden file creation. Without 
# this flag FDT transfers a /localDir/fileName to an
# intermediate hidden file /destinationDir/.fileName 
# and, after the content of the file is transfered,
# it moves the file to /destinationDir/fileName.
noTmpFile = {'default': 'auto', 'overwrite': True}

# Number of writer threads per partition.
writersCount = {'min': 1, 'max': 4, 'default': 'auto', 'overwrite': True}

# Number of reader threads per partition.
readersCount = {'min': 1, 'max': 4, 'default': 'auto', 'overwrite': True}

# (Non-)Blocking I/O mode. In the blocking mode every
# stream(socket) will use a thread to perform the I/O.
# By default (since 0.9.20) blocking mode is used
blockingIO = {'default': 'auto', 'overwrite': True}

# Non blocking I/O retry factor. Repeat every
# read/write operation (non-blocking I/O mode only),
# which returns 0, up to <iof> times before waiting for
# I/O readiness.Default is 1, which should be ok, but 
# values of 2 or 3 may show slight gains in network I/O
# performance. Usual values are between 1 and 4.
# Higher values are not recommended because the gain
# will be zero while the CPU System will increase
ioRetry = {'min': 1, 'max': 4, 'default': 'auto', 'overwrite': True}

# AWARE!!!!!
# PLEASE CHANGE THESE VALUES ONLY AND ONLY IF YOU REALLY KNOW WHAT YOU ARE DOING.
# ALLOWING FOR USERS TO MODIFY THESE VALUES MIGHT MAKE YOUR SERVICE AND MACHINE UNRESPONSIVE.
# PLEASE CONSULT WITH DEVELOPERS FIRST FOR CHANGING THESE VALUES!!!!!
# Other JAVA options are pre-defined in an executed command and it is also not sugested to change them
xms = {'min': 256, 'max': 1024, 'default': 1024, 'overwrite': False}
xmx = {'min': 256, 'max': 1024, 'default': 1024, 'overwrite': False}


[general]

# port on which fdtd service will run (the main Python process)
port = 8444

# port on which AuthService will run (Java Grid authentication service)
portAuthService = 8445

# port range on which FDT Java servers will be running upon requests
portRangeFDTServer = 54321,54400

# log file, if necessary to specify directly to fdtd
# subsequent fdtd starts append logs, nothing shall go to stdout
# if necessary (i.e. system running of fdtd.py from shell
# daemon wrapper fdtd.sh), this option is better set when starting
# fdtd.py rather than here
logFile = /tmp/fdtd.log

# pid file
# file where fdtd.py stores its pid (used by shell daemon wrapper fdtd.sh)
# pid of the fdtd.py process is stored into this file only
# if daemonize is True
# pidFile value is most likely to be override in system daemon shell wrapper
pidFile = /var/run/fdtd/fdtd.pid

# if set, fdtd.py stores its pid into pidFile, forks, remains running on
# background and returns the shell
daemonize = False

# apart from the above logFile, use also separate log files
# for each transfer request - easier to track issues with concurrent
# transfers (every transfer request consists of multiple
# sub-request (network calls) and these will be logged into separate
# files if this is set)
transferSeparateLogFile = True

# hostname of this machine (when bounding to a special hostname,
# e.g. t3-fdt.ultralight.org or even IP address has to be put here for
# Caltech dual nodes naming (cithep118.ultralight.org
# public name is compute-4-1). 
# Not necessary on the Nebraska end.
#hostname = localhost

# destinations for ApMon MonaLISA monitoring
# local ML client executable from
# http://monalisa.caltech.edu/monalisa__Interactive_Clients__MonALISA_client.html
# relevant group FDT_MON, services:
#   FDTMon_CERN and FDTMon_Caltech (correspondingly)
apMonDestinations = monalisa.cern.ch:8885

# debug output level, accepted values:
#   'CRITICAL', 'DEBUG', 'ERROR', 'FATAL' 'WARNING'
debug = DEBUG


# FDT Java client -----------------------------------------------------------

# this is a template for FDT Java sending client
# -v, -vv for debugging output from FDT
# the port value is port for FDT Java (different from port value above
# which is for fdtd service)
# no GSI authentication (GSI turned out not to be possible here,
# details in the email, related command template in the older versions
# of this file in repository)
fdtSendingClientCommand = sudo -u dynes /usr/bin/wrapper_fdt.sh -XX:-HeapDumpOnOutOfMemoryError -Xms1024m -Xmx1024m -cp $FDTJAR lia.util.net.copy.FDT -bio -P 16 -p %(port)s -c %(hostDest)s -d / -fl %(fileList)s -rCount 5 -bs 64K -noupdates -enable_apmon %(apmonDest)s -monID %(monID)s -notmp
#
# in case the process is going to be killed, wait some timeout should
# it finish on its own, seconds 
fdtSendingClientKillTimeout = 30


# FDT Java server -----------------------------------------------------------

# -S FDT server option: disable stand-alone mode - once the transfer
# is over, the server shuts down automatically. in order not to interrupt
# server before it definitely finished, wait until server shuts itself
# (unless it is hanging ...)
# also, when transfer fails, e.g. with permission issue (this gets reported
# to the client), but the FDT Java server doesn't shut down even with
# this -S option. Automatic shutdown (-S) is effective only after
# successful transfer.

# -v, -vv for debugging output from FDT (should the output go to console,
# it crashes (OS issue) ...)

# the port value is port for FDT Java (different from port value above which
# is for fdtd service)

# GSI turned out not to be possible here (between FDT client and server)
# details in the email, related (old) server command template - repository

# non Hadoop destination
# fdtReceivingServerCommand = sudo -u %(sudouser)s /usr/bin/wrapper_fdt.sh -cp $FDTJAR lia.util.net.copy.FDT -bs 2M -p %(port)s -wCount 12 -f %(clientIP)s -S -noupdates -enable_apmon -monID %(monID)s

# Hadoop destination
# (previous (for Badar's adapter version) settings erased, left only
# these after Ramiro's writing part reimplementation).
# Summer 2012 - issues with NIO (non-blocking IO), forcing BIO (blocking IO)
# which is default in newer versions of FDT
fdtReceivingServerCommand = sudo -u dynes /usr/bin/wrapper_fdt.sh -XX:-HeapDumpOnOutOfMemoryError -Xms1024m -Xmx1024m -cp $FDTJAR lia.util.net.copy.FDT -bs 64K -p %(port)s -bio -wCount 5 -f %(clientIP)s -nolock -S -noupdates -enable_apmon %(apmonDest)s -monID %(monID)s -notmp


# when starting the process, block until following logging output is captured
fdtServerLogOutputToWaitFor = "FDTServer start listening on port: %(port)s"
# wait for the above log output only certain number of seconds, this timeout
# is waited when starting the process
fdtServerLogOutputTimeout = 15

# in case the process is going to be killed, wait some timeout should
# it finish on its own, seconds
fdtReceivingServerKillTimeout = 20


# AuthService Java server used for GSI authentication -----------------------
# command will not be run via sudo - don't know the local grid user at
# this stage
# stdout, stderr output of the AuthService goes into -log file
# if log file is not specified, stdout, stderr is captured and doesn't
# become available until the AuthService is stopped
#authServiceCommand = /usr/bin/wrapper_auth.sh -DX509_CERT_DIR=$X509_CERT_DIR -DX509_SERVICE_KEY=$X509_SERVICE_KEY -DX509_SERVICE_CERT=$X509_SERVICE_CERT -DGRIDMAP=$GRIDMAPFILE -cp $GSILIBS:$FDTJAR:$AUTHSERVICEJAR authenticator.AuthService -p %(port)s -log /tmp/fdtd-auth.log
# until the following string appears in the output after which it
# continues asynchronously
#authServiceLogOutputToWaitFor = "AuthService started ..."
# wait for the above log output string only certain number of seconds, this
# timeout is waited when starting the process
#authServiceLogOutputTimeout = 3

# don't define any kill timeout for AuthService, 0s (default will be used),
# this thing can be killed straight away


# command wrapper for killing external process ------------------------------
killCommandSudo = sudo -u dynes /usr/bin/wrapper_kill.sh %(pid)s
killCommand = /usr/bin/wrapper_kill.sh %(pid)s
